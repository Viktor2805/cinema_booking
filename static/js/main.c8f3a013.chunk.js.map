{"version":3,"sources":["components/Seat.js","components/Seats.js","components/Basket.js","App.js","serviceWorker.js","index.js"],"names":["Seat","props","styleSeat","seat","id","reserved","selected","backgroundColor","marginTop","marginRight","Number","isInteger","ref","React","createRef","this","numOfseat","tooltip","className","data-tooltip","style","onClick","e","selectSeat","Component","Seats","seats","map","key","Basket","someRefName","show","length","transform","addToBasketAnimation","xmlns","viewBox","data-name","d","App","componentDidMount","num","i","index","String","fromCharCode","Math","floor","random","push","setState","console","log","current","getBoundingClientRect","x","state","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8f3a013.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Seat extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    styleSeat = () => {\r\n        let {id,reserved,selected} = this.props.seat;\r\n        const styleSeat = {\r\n            backgroundColor: \"\",\r\n            marginTop: \"\",\r\n            marginRight: \"\"\r\n        };\r\n        // change backgroundColor seat if it is reserved\r\n        if (reserved  === true) styleSeat.backgroundColor = \"#de6363\";\r\n        // separate seats horizontally into two parts\r\n        if (id % 10 === 0 && !Number.isInteger(id / 20)) {\r\n            styleSeat.marginRight = \"20px\";\r\n        }\r\n         // separate seats vertically into two parts\r\n        if (id > 400 && id <= 420) styleSeat.marginTop = \"20px\";\r\n        if (selected === true) {\r\n            styleSeat.backgroundColor = \"#21c252\"\r\n        }\r\n        return styleSeat;\r\n    }\r\n\r\n    render() {\r\n        const {id,reserved,numOfseat} = this.props.seat;\r\n        let tooltip = \"tooltip\";\r\n        if (reserved ) tooltip = \"\";\r\n        // console.log(this.ref);\r\n        return (\r\n            <div ref = {this.ref}className={\"seat \" + tooltip} \r\n             data-tooltip={numOfseat} style={this.styleSeat()}\r\n             onClick={(e,) => this.props.selectSeat(id,e,this.ref)}>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// PropTypes\r\nSeat.propTypes = {\r\n    seat: PropTypes.object.isRequired,\r\n}\r\nexport default Seat;\r\n","import React, { Component } from 'react'\r\nimport Seat from \"./Seat\"\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Seats extends Component {   \r\n     render() {\r\n        return (\r\n            <div className=\"seats\">\r\n                <h1>Seating plan</h1>\r\n                {this.props.seats.map((seat) => (   \r\n                <Seat key={seat.id} seat ={seat}  \r\n                selectSeat={this.props.selectSeat}\r\n                />))}\r\n                <ul className=\"legend\">\r\n                    <li className=\"legend__item legend__item--free\">Free</li>\r\n                    <li className=\"legend__item legend__item--reserved\">Reserved</li>\r\n                    <li className=\"legend__item legend__item--selected\">Selected</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// PropTypes\r\nSeats.propTypes = {\r\n    seats: PropTypes.array.isRequired,\r\n    selectSeat: PropTypes.func.isRequired,\r\n}\r\nexport default Seats;\r\n","\r\nimport React, { Component } from 'react'\r\n\r\nclass Basket extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.someRefName = React.createRef();\r\n      }\r\n\r\n    render() {\r\n        let {selected} = this.props\r\n        let show = {};\r\n        // changing backgroundColor of basket\r\n        let backgroundColor = {};\r\n        if (selected.length === 0) {\r\n         show = {transform:\"scale(0)\"}\r\n         backgroundColor = {backgroundColor: \"#48724e\"}\r\n        } else {\r\n            backgroundColor = {backgroundColor: \"#017374\"}\r\n        }\r\n     \r\n        return (\r\n            <div  onClick={(e) => this.props.addToBasketAnimation(e,this.someRefName)} className=\"checkout\">\r\n            <button  ref={this.someRefName} style={backgroundColor} className=\"button-basket\">\r\n                <svg className=\"basket\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\r\n                    <g data-name=\"1\" id=\"_1\">\r\n                    <path d=\"M397.78,316H192.65A15,15,0,0,1,178,304.33L143.46,153.85a15,15,0,0,1,14.62-18.36H432.35A15,15,0,0,1,447,153.85L412.4,304.33A15,15,0,0,1,397.78,316ZM204.59,286H385.84l27.67-120.48H176.91Z\"/>\r\n                    <path d=\"M222,450a57.48,57.48,0,1,1,57.48-57.48A57.54,57.54,0,0,1,222,450Zm0-84.95a27.48,27.48,0,1,0,27.48,27.47A27.5,27.5,0,0,0,222,365.05Z\"/><path d=\"M368.42,450a57.48,57.48,0,1,1,57.48-57.48A57.54,57.54,0,0,1,368.42,450Zm0-84.95a27.48,27.48,0,1,0,27.48,27.47A27.5,27.5,0,0,0,368.42,365.05Z\"/>\r\n                    <path d=\"M158.08,165.49a15,15,0,0,1-14.23-10.26L118.14,78H70.7a15,15,0,1,1,0-30H129a15,15,0,0,1,14.23,10.26l29.13,87.49a15,15,0,0,1-14.23,19.74Z\"/></g>\r\n                </svg>\r\n                <span style={show}>{selected.length}</span>\r\n            </button>\r\n            <div className=\"total\">{`Total:${selected.length * 100}`}</div>\r\n            <button className=\"action action--buy\">Buy tickets</button>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Basket;\r\n","import React from 'react';\nimport './scss/normalize.css'; \nimport './scss/App.css';\nimport Seats from './components/Seats.js';\nimport Basket from './components/Basket.js';\nimport { useRef } from 'react';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.someRefName = React.createRef();\n    this.state = {\n      seats:[],\n      selected:[],\n    };\n  }\n  \n    // create free seats and make reserved seats random\n    componentDidMount = () => {\n      let seats = [];\n      let num = 1;\n      for (let i = 1; i <= 20; i++) {\n        for (let index = 1; index <= 40; index++) {\n          let numOfseat = String.fromCharCode(i + 64) + index;\n          if (Math.floor(Math.random() * 9) === 5) {\n            seats.push({id:num++,\"numOfseat\":numOfseat,reserved:true,selected:false});\n          }\n          else seats.push({id:num++,\"numOfseat\":numOfseat,reserved:false,selected:false});\n        };\n      };\n      this.setState({seats});\n    };\n  \n    selectSeat = (id,e,ref) => {\n      console.log(ref.current.getBoundingClientRect().x);\n      this.setState({\n        seats: this.state.seats.map(seat => {\n          if (seat.id === id && !seat.reserved) {\n            seat.selected = !seat.selected;\n            if (!seat.selected) {\n              this.setState({selected:this.state.selected.filter(x => {\n                if (x.id !== seat.id) return x;\n              })});\n            } else this.setState({selected:[...this.state.selected,seat]});\n          };\n          return seat;\n        })\n      });\n    };\n\n    addToBasketAnimation = (e,someRefName) => {\n      console.log(someRefName.current.getBoundingClientRect().x);\n    }\n\n    render() {\n      const {id,seats,selected} = this.state;\n      return (\n        <div  className=\"App\">\n          <Seats seats={seats} selectSeat={this.selectSeat}></Seats>\n          <Basket selected={selected} addToBasketAnimation={this.addToBasketAnimation}></Basket>\n        </div>\n      )\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}